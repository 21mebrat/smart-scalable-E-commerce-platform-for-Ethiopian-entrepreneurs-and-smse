generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Account Model
model Account {
  uniqueId    String       @id @default(uuid())
  clerkId     String       @unique
  email       String       @unique
  dateJoined  DateTime     @default(now()) @map("date_joined")
  lastLogin   DateTime     @default(now()) @map("last_login")
  isAdmin     Boolean      @default(false) @map("is_admin")
  isStaff     Boolean      @default(true) @map("is_staff")
  isSuperuser Boolean      @default(false) @map("is_superuser")
  isActive    Boolean      @default(true) @map("is_active")
  role        UserRole     @default(CUSTOMER) // Default role is CUSTOMER
  createdAt   DateTime     @default(now())
  ShopRating  ShopRating[]

  merchantId       Int?      @map("merchant_id")
  customerId       Int?      @map("customer_id")
  Merchant         Merchant? @relation(fields: [merchantUniqueId], references: [uniqueId])
  merchantUniqueId String?
  Customer         Customer?
  Admin            Admin?
}

// Merchant Model
model Merchant {
  uniqueId                String  @id @default(uuid()) @map("unique_id")
  userId                  String  @unique
  bankAccountNumber       String  @map("bank_account_number") @db.VarChar(20)
  hasPhysicalStore        Boolean @default(false) @map("has_physical_store")
  physicalShopName        String? @map("physical_shop_name") @db.VarChar(200)
  physicalShopAddress     String? @map("physical_shop_address")
  physicalShopCity        String? @map("physical_shop_city") @db.VarChar(100)
  physicalShopPhoneNumber String? @map("physical_shop_phone_number") @db.VarChar(15)
  onlineShopType          String? @map("online_shop_type") @db.VarChar(100)

  shops              Shop[]               @relation("MerchantOwnedShop")
  Order              Order[]
  CustomizedTemplate CustomizedTemplate[]
  Account            Account[]
}

// Admin Model
model Admin {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())

  user Account @relation(fields: [userId], references: [uniqueId])
}

// Customer Model
model Customer {
  uniqueId    String  @id @default(uuid()) @map("unique_id")
  userId      String  @unique
  firstName   String? @map("first_name") @db.VarChar(1024)
  lastName    String? @map("last_name") @db.VarChar(1024)
  address1    String? @map("address1") @db.VarChar(1024)
  address2    String? @map("address2") @db.VarChar(1024)
  zipCode     String? @map("zip_code") @db.VarChar(12)
  city        String? @db.VarChar(1024)
  state       String? @db.VarChar(1024)
  country     String? @db.VarChar(1024)
  phoneNumber String? @map("phone_number") @db.VarChar(15)

  user  Account @relation(fields: [userId], references: [uniqueId])
  Order Order[]
}

// Product Model
model Product {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String? @db.Text
  price       Float
  stock       Int

  categoryId Int
  category   ProductCategory @relation(fields: [categoryId], references: [id])

  orderItems OrderItem[]
  CartItem   CartItem[]
}

// ProductCategory Model
model ProductCategory {
  id           Int       @id @default(autoincrement())
  categoryName String    @unique @map("category_name") @db.VarChar(50)
  Product      Product[]
}

// ShopCategory Model
model ShopCategory {
  id            Int     @id @default(autoincrement())
  categoryName  String  @unique @map("category_name") @db.VarChar(50)
  slug          String  @unique @db.VarChar(50)
  description   String?
  categoryImage String? @map("category_image")

  Shop Shop[]
}

// Cart Model
model Cart {
  id        Int        @id @default(autoincrement())
  cartId    String?    @map("cart_id") @db.VarChar(250)
  dateAdded DateTime   @default(now()) @map("date_added")
  cartItems CartItem[]
}

// CartItem Model
model CartItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  isActive  Boolean @default(true) @map("is_active")
  productId Int
  cartId    Int

  product Product @relation(fields: [productId], references: [id])
  cart    Cart    @relation(fields: [cartId], references: [id])
}

// Template Model
model Template {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(200)
  description        String
  previewImage       String               @map("preview_image")
  category           String               @db.VarChar(20)
  templateType       String               @default("free") @map("template_type")
  pages              Page[]
  CustomizedTemplate CustomizedTemplate[]
}

// Page Model
model Page {
  id         Int    @id @default(autoincrement())
  name       String @db.VarChar(200)
  html       String
  css        String
  js         String
  templateId Int

  template Template @relation(fields: [templateId], references: [id])
}

// Order Model
model Order {
  uniqueId         String   @id @default(uuid()) @map("unique_id")
  customerId       String
  merchantId       String
  totalAmount      Float    @default(0) @map("total_amount")
  orderStatus      String   @default("Pending") @map("order_status")
  paymentStatus    String   @map("payment_status")
  barcodeImage     String?  @map("barcode_image")
  paymentMethod    String   @map("payment_method")
  orderDate        DateTime @default(now()) @map("order_date")
  shippingOptionId Int?

  customer       Customer        @relation(fields: [customerId], references: [uniqueId])
  merchant       Merchant        @relation(fields: [merchantId], references: [uniqueId])
  orderItems     OrderItem[]
  ShippingOption ShippingOption? @relation(fields: [shippingOptionId], references: [id])
}

// ShippingOption Model
model ShippingOption {
  id           Int     @id @default(autoincrement())
  name         String
  cost         Float
  deliveryTime Int     @map("delivery_time")
  orders       Order[]
}

// OrderItem Model
model OrderItem {
  id              Int @id @default(autoincrement())
  productId       Int
  quantityOrdered Int @default(1)

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [uniqueId])
  orderId String
}

// Shop Model
model Shop {
  uniqueId             String             @id @default(uuid()) @map("unique_id")
  name                 String
  ownerId              String
  previewImage         String?            @map("preview_image")
  customizedTemplateId Int
  customizedTemplate   CustomizedTemplate @relation(fields: [customizedTemplateId], references: [id])
  categoryId           Int?               @map("category")
  category             ShopCategory?      @relation(fields: [categoryId], references: [id])
  createdDate          DateTime           @default(now()) @map("created_date")
  updatedDate          DateTime           @updatedAt @map("updated_date")
  suspense             Boolean            @default(false)
  status               String             @default("unpaid")
  nextPaymentDueDate   DateTime?          @map("next_payment_due_date")
  lastPaymentDate      DateTime?          @map("last_payment_date")

  owner       Merchant     @relation("MerchantOwnedShop", fields: [ownerId], references: [uniqueId])
  shopRatings ShopRating[]
}

// ShopRating Model
model ShopRating {
  id        Int      @id @default(autoincrement())
  shopId    String   @map("shop_id")
  userId    String   @map("user_id")
  rating    Int
  comment   String?  @map("comment")
  ip        String?  @map("ip")
  status    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  shop Shop    @relation(fields: [shopId], references: [uniqueId])
  user Account @relation(fields: [userId], references: [uniqueId])
}

// CustomizedTemplate Model
model CustomizedTemplate {
  id                 Int      @id @default(autoincrement())
  originalTemplateId Int
  modifiedBy         Merchant @relation(fields: [modifiedById], references: [uniqueId])
  modifiedById       String
  createdAt          DateTime @default(now()) @map("created_at")

  originalTemplate Template         @relation(fields: [originalTemplateId], references: [id])
  customizedPages  CustomizedPage[]
  Shop             Shop[]

  @@unique([modifiedById, originalTemplateId])
}

// CustomizedPage Model
model CustomizedPage {
  id                   Int    @id @default(autoincrement())
  customizedTemplateId Int
  name                 String
  html                 String
  css                  String
  js                   String

  customizedTemplate CustomizedTemplate @relation(fields: [customizedTemplateId], references: [id])
}

// Screenshot Model
model Screenshot {
  id      Int     @id @default(autoincrement())
  image   String
  caption String? @map("caption")
}

// Picture Model
model Picture {
  id    Int    @id @default(autoincrement())
  image String
}

enum UserRole {
  CUSTOMER
  ADMIN
  MERCHANT
}
