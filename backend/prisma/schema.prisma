// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  MERCHANT
  ADMIN
}

enum StatusIndicator {
  ACTIVE
  SUSPENDED
  PENDING
}

model Account {
  id           String    @id @default(uuid())
  firestName   String
  lastName     String
  role         Role      @default(CUSTOMER)
  email        String    @unique
  password     String
  profileUrl   String?
  refreshToken String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  merchant     Merchant?
  admin        Admin?
  customer     Customer?
}

model Merchant {
  id               String             @id @default(uuid())
  accountId        String             @unique
  account          Account            @relation(fields: [accountId], references: [id])
  identityCard     String
  locationId       String
  businessName     String
  ownerName        String
  businessPhone    String             @unique
  bussinessEmail   String             @unique
  cbeAccountNo     String             @unique
  businessType     String
  status           StatusIndicator    @default(PENDING)
  registrationDate DateTime           @default(now())
  location         Location           @relation(fields: [locationId], references: [id])
  shops            Shop[]
  templates        MerchantTemplate[] // This allows one-to-many relationship (one merchant can have multiple templates)
}

model Admin {
  id        String  @id @default(uuid())
  accountId String  @unique
  account   Account @relation(fields: [accountId], references: [id])
}

model Customer {
  id        String  @id @default(uuid())
  accountId String  @unique
  account   Account @relation(fields: [accountId], references: [id])
  orders    Order[]
}

model Shop {
  id                 String            @id @default(uuid())
  merchantId         String
  merchant           Merchant          @relation(fields: [merchantId], references: [id])
  name               String
  slug               String            @unique
  description        String?
  locationId         String
  location           Location          @relation(fields: [locationId], references: [id])
  businessHours      Json?
  socialMedia        Json?
  bannerImageUrl     String?
  logoImageUrl       String?
  status             ShopStatus        @default(ACTIVE)
  approved           Boolean           @default(false)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  products           Product[]
  orders             Order[]
  merchantTemplate   MerchantTemplate? @relation(fields: [merchantTemplateId], references: [id])
  merchantTemplateId String?           @unique
  // Payment/Verification
  verified           Boolean           @default(false)
  verificationId     String?

  @@index([name])
  @@index([slug])
  @@index([createdAt])
}

enum ShopStatus {
  ACTIVE
  INACTIVE
  UNDER_REVIEW
  SUSPENDED
}

model Location {
  id        String     @id @default(uuid())
  town      String
  country   String
  region    String
  kebele    String
  woreda    String
  merchants Merchant[]
  shops     Shop[]
  orders    Order[]
}

model BaseTemplate {
  id               String             @id @default(uuid())
  name             String
  description      String
  basePrice        Float
  previewUrls      String[]
  status           StatusIndicator    @default(PENDING)
  pages            BasePage[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  MerchantTemplate MerchantTemplate[]

  @@unique([name])
  @@index([name])
}

model BasePage {
  id         String       @id @default(uuid())
  name       String
  html       String
  css        String
  js         String
  template   BaseTemplate @relation(fields: [templateId], references: [id])
  templateId String

  @@index([templateId])
}

model MerchantTemplate {
  id             String        @id @default(uuid())
  merchant       Merchant      @relation(fields: [merchantId], references: [id])
  merchantId     String
  name           String
  description    String
  baseTemplate   BaseTemplate  @relation(fields: [baseTemplateId], references: [id])
  baseTemplateId String
  customPages    CustomPage[]
  paymentStatus  PaymentStatus @default(PENDING)
  activatedAt    DateTime?     @default(now())
  expiresAt      DateTime?
  version        String        @default("1.0.0")
  isActive       Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  shop           Shop?

  @@unique([merchantId, baseTemplateId])
  @@index([merchantId])
}

model CustomPage {
  id                 String           @id @default(uuid())
  name               String
  html               String
  css                String
  js                 String
  merchantTemplate   MerchantTemplate @relation(fields: [merchantTemplateId], references: [id])
  merchantTemplateId String

  @@index([merchantTemplateId])
}

model Order {
  id         String      @id @default(uuid())
  customerId String
  customer   Customer    @relation(fields: [customerId], references: [id])
  shopId     String
  shop       Shop        @relation(fields: [shopId], references: [id])
  productId  String
  product    Product     @relation(fields: [productId], references: [id])
  locationId String
  location   Location    @relation(fields: [locationId], references: [id])
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Product {
  id            String          @id @default(uuid())
  name          String
  description   String
  price         Float
  discountPrice Float?
  quantity      Int
  category      String
  tags          String[]
  status        StatusIndicator @default(PENDING)
  images        String[]
  brand         String?
  videoUrl      String?
  slug          String          @unique
  views         Int             @default(0)
  ratings       Float           @default(0.0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  shopId        String
  shop          Shop            @relation(fields: [shopId], references: [id])
  orders        Order[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Notification {
  id      String @id @default(uuid())
  message String
}

enum PaymentStatus {
  ACTIVE
  EXPIRED
  PENDING
  CANCELED
  FAILED
}
