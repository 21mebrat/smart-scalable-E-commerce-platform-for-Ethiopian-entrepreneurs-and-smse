// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  MERCHANT
  ADMIN
}

enum StatusIndicator {
  ACTIVE
  SUSPENDED
  PENDING
}

model Account {
  id           String    @id @default(uuid())
  firestName   String
  lastName     String
  role         Role      @default(CUSTOMER)
  email        String    @unique
  password     String
  profileUrl   String?
  refreshToken String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  merchant     Merchant?
  admin        Admin?
  customer     Customer?
}

model Merchant {
  id               String          @id @default(uuid())
  accountId        String          @unique
  account          Account         @relation(fields: [accountId], references: [id])
  identityCard     String
  locationId       String
  businessName     String
  ownerName        String
  businessPhone    String          @unique
  bussinessEmail   String          @unique
  cbeAccountNo     String          @unique
  businessType     String
  status           StatusIndicator @default(PENDING)
  registrationDate DateTime        @default(now())
  location         Location        @relation(fields: [locationId], references: [id])
  shops            Shop[]
}

model Admin {
  id        String  @id @default(uuid())
  accountId String  @unique
  account   Account @relation(fields: [accountId], references: [id])
}

model Customer {
  id        String  @id @default(uuid())
  accountId String  @unique
  account   Account @relation(fields: [accountId], references: [id])
  orders    Order[]
}

model Shop {
  id             String     @id @default(uuid())
  merchantId     String
  merchant       Merchant   @relation(fields: [merchantId], references: [id])
  name           String
  slug           String     @unique
  description    String?
  templateId     String
  template       Template   @relation(fields: [templateId], references: [id])
  locationId     String
  location       Location   @relation(fields: [locationId], references: [id])
  businessHours  Json? // ex: { "monday": { "open": "09:00", "close": "18:00" }, ... }
  socialMedia    Json? // { facebook: "...", instagram: "...", twitter: "..." }
  bannerImageUrl String?
  logoImageUrl   String?
  status         ShopStatus @default(ACTIVE)
  approved       Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  products       Product[]
  orders         Order[]
  pages          Page[]

  // SEO Fields
  metaTitle       String?
  metaDescription String?

  // Payment/Verification
  verified       Boolean @default(false)
  verificationId String?

  @@index([name])
  @@index([slug])
  @@index([createdAt])
}

enum ShopStatus {
  ACTIVE
  INACTIVE
  UNDER_REVIEW
  SUSPENDED
}

model Location {
  id        String     @id @default(uuid())
  town      String
  country   String
  region    String
  kebele    String
  woreda    String
  merchants Merchant[]
  shops     Shop[]
  orders    Order[]
}

model Page {
  id         String   @id @default(uuid())
  name       String
  html       String
  css        String
  js         String
  templateId String
  template   Template @relation(fields: [templateId], references: [id])
  Shop       Shop?    @relation(fields: [shopId], references: [id])
  shopId     String?
}

model Template {
  id           String          @id @default(uuid())
  name         String
  description  String
  price        Float
  previewImage String[]
  status       StatusIndicator @default(PENDING)
  pages        Page[]
  shops        Shop[]
}

model Order {
  id         String      @id @default(uuid())
  customerId String
  customer   Customer    @relation(fields: [customerId], references: [id])
  shopId     String
  shop       Shop        @relation(fields: [shopId], references: [id])
  productId  String
  product    Product     @relation(fields: [productId], references: [id])
  locationId String
  location   Location    @relation(fields: [locationId], references: [id])
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Consider adding if you need status change history
  // statusUpdates Json? 
}

model Product {
  id            String          @id @default(uuid())
  name          String
  description   String
  price         Float
  discountPrice Float? // Optional discount price
  quantity      Int
  category      String
  tags          String[] // Array of keywords for search & filtering
  status        StatusIndicator @default(PENDING) // available, out_of_stock, draft, hidden
  images        String[] // Array of image URLs
  brand         String?
  videoUrl      String? // Optional video demonstration URL
  slug          String          @unique // SEO-friendly URL
  views         Int             @default(0)
  ratings       Float           @default(0.0) // Average rating

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shopId    String
  shop      Shop     @relation(fields: [shopId], references: [id])
  orders    Order[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
